{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nimport { Tree } from 'antd';\nvar TreeNode = Tree.TreeNode;\n\nvar Demo =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Demo, _React$Component);\n\n  function Demo() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Demo);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Demo)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      treeData: [{\n        title: 'Expand to load',\n        key: '0'\n      }, {\n        title: 'Expand to load',\n        key: '1'\n      }, {\n        title: 'Tree Node',\n        key: '2',\n        isLeaf: true\n      }]\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onLoadData\", function (treeNode) {\n      return new _Promise(function (resolve) {\n        if (treeNode.props.children) {\n          resolve();\n          return;\n        }\n\n        setTimeout(function () {\n          treeNode.props.dataRef.children = [{\n            title: 'Child Node',\n            key: \"\".concat(treeNode.props.eventKey, \"-0\")\n          }, {\n            title: 'Child Node',\n            key: \"\".concat(treeNode.props.eventKey, \"-1\")\n          }];\n\n          _this.setState({\n            treeData: _toConsumableArray(_this.state.treeData)\n          });\n\n          resolve();\n        }, 1000);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderTreeNodes\", function (data) {\n      return data.map(function (item) {\n        if (item.children) {\n          return React.createElement(TreeNode, {\n            title: item.title,\n            key: item.key,\n            dataRef: item\n          }, _this.renderTreeNodes(item.children));\n        }\n\n        return React.createElement(TreeNode, _extends({}, item, {\n          dataRef: item\n        }));\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(Demo, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Tree, {\n        loadData: this.onLoadData\n      }, this.renderTreeNodes(this.state.treeData));\n    }\n  }]);\n\n  return Demo;\n}(React.Component);\n\nexport default Demo;","map":null,"metadata":{},"sourceType":"module"}