{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nimport { Upload, Button, Icon, message } from 'antd';\nimport reqwest from 'reqwest';\n\nvar Demo =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Demo, _React$Component);\n\n  function Demo() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Demo);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Demo)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      fileList: [],\n      uploading: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleUpload\", function () {\n      var fileList = _this.state.fileList;\n      var formData = new FormData();\n      fileList.forEach(function (file) {\n        formData.append('files[]', file);\n      });\n\n      _this.setState({\n        uploading: true\n      }); // You can use any AJAX library you like\n\n\n      reqwest({\n        url: '//jsonplaceholder.typicode.com/posts/',\n        method: 'post',\n        processData: false,\n        data: formData,\n        success: function success() {\n          _this.setState({\n            fileList: [],\n            uploading: false\n          });\n\n          message.success('upload successfully.');\n        },\n        error: function error() {\n          _this.setState({\n            uploading: false\n          });\n\n          message.error('upload failed.');\n        }\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(Demo, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          uploading = _this$state.uploading,\n          fileList = _this$state.fileList;\n      var props = {\n        onRemove: function onRemove(file) {\n          _this2.setState(function (state) {\n            var index = state.fileList.indexOf(file);\n            var newFileList = state.fileList.slice();\n            newFileList.splice(index, 1);\n            return {\n              fileList: newFileList\n            };\n          });\n        },\n        beforeUpload: function beforeUpload(file) {\n          _this2.setState(function (state) {\n            return {\n              fileList: [].concat(_toConsumableArray(state.fileList), [file])\n            };\n          });\n\n          return false;\n        },\n        fileList: fileList\n      };\n      return React.createElement(\"div\", null, React.createElement(Upload, props, React.createElement(Button, null, React.createElement(Icon, {\n        type: \"upload\"\n      }), \" Select File\")), React.createElement(Button, {\n        type: \"primary\",\n        onClick: this.handleUpload,\n        disabled: fileList.length === 0,\n        loading: uploading,\n        style: {\n          marginTop: 16\n        }\n      }, uploading ? 'Uploading' : 'Start Upload'));\n    }\n  }]);\n\n  return Demo;\n}(React.Component);\n\nexport default Demo;","map":null,"metadata":{},"sourceType":"module"}