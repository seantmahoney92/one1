{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport React from \"react\";\n// Copyright (c) 2016 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport IrisData from '../datasets/iris.json';\nimport { ParallelCoordinates } from 'react-vis'; // {\"sepal length\": 5.1, \"sepal width\": 3.5, \"petal length\": 1.4, \"petal width\": 0.2, \"species\": \"setosa\"},\n\nvar SPECIES_COLORS = {\n  setosa: '#12939A',\n  virginica: '#79C7E3',\n  versicolor: '#1A3177'\n};\n\nvar domainStructure = _Object$keys(IrisData[0]).filter(function (name) {\n  return name !== 'species';\n}).map(function (name) {\n  return {\n    name: name,\n    domain: [Infinity, -Infinity]\n  };\n});\n\nvar domains = IrisData.reduce(function (acc, row) {\n  return acc.map(function (d) {\n    return {\n      name: d.name,\n      domain: [Math.min(d.domain[0], row[d.name]), Math.max(d.domain[1], row[d.name])]\n    };\n  });\n}, domainStructure);\nexport default function BrushedParallelCoordinates(props) {\n  return React.createElement(ParallelCoordinates, {\n    animation: true,\n    brushing: true,\n    data: IrisData.map(function (d) {\n      return _objectSpread({}, d, {\n        color: SPECIES_COLORS[d.species]\n      });\n    }),\n    domains: domains,\n    margin: 60,\n    width: 600,\n    height: 400\n  });\n}","map":null,"metadata":{},"sourceType":"module"}