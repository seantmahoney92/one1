{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nimport { Form, Input, Icon, Button } from 'antd';\nvar FormItem = Form.Item;\n\nvar DynamicFieldSet =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DynamicFieldSet, _React$Component);\n\n  function DynamicFieldSet() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DynamicFieldSet);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DynamicFieldSet)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"remove\", function (k) {\n      var form = _this.props.form; // can use data-binding to get\n\n      var keys = form.getFieldValue('keys'); // We need at least one passenger\n\n      if (keys.length === 1) {\n        return;\n      } // can use data-binding to set\n\n\n      form.setFieldsValue({\n        keys: keys.filter(function (key) {\n          return key !== k;\n        })\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"add\", function () {\n      var form = _this.props.form; // can use data-binding to get\n\n      var keys = form.getFieldValue('keys');\n      var nextKeys = keys.concat(keys.length); // can use data-binding to set\n      // important! notify form to detect changes\n\n      form.setFieldsValue({\n        keys: nextKeys\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSubmit\", function (e) {\n      e.preventDefault();\n\n      _this.props.form.validateFields(function (err, values) {\n        if (!err) {\n          console.log('Received values of form: ', values);\n        }\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(DynamicFieldSet, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props$form = this.props.form,\n          getFieldDecorator = _this$props$form.getFieldDecorator,\n          getFieldValue = _this$props$form.getFieldValue;\n      var formItemLayout = {\n        labelCol: {\n          xs: {\n            span: 24\n          },\n          sm: {\n            span: 4\n          }\n        },\n        wrapperCol: {\n          xs: {\n            span: 24\n          },\n          sm: {\n            span: 20\n          }\n        }\n      };\n      var formItemLayoutWithOutLabel = {\n        wrapperCol: {\n          xs: {\n            span: 24,\n            offset: 0\n          },\n          sm: {\n            span: 20,\n            offset: 4\n          }\n        }\n      };\n      getFieldDecorator('keys', {\n        initialValue: []\n      });\n      var keys = getFieldValue('keys');\n      var formItems = keys.map(function (k, index) {\n        return React.createElement(FormItem, _extends({}, index === 0 ? formItemLayout : formItemLayoutWithOutLabel, {\n          label: index === 0 ? 'Passengers' : '',\n          required: false,\n          key: k\n        }), getFieldDecorator(\"names[\".concat(k, \"]\"), {\n          validateTrigger: ['onChange', 'onBlur'],\n          rules: [{\n            required: true,\n            whitespace: true,\n            message: \"Please input passenger's name or delete this field.\"\n          }]\n        })(React.createElement(Input, {\n          placeholder: \"passenger name\",\n          style: {\n            width: '60%',\n            marginRight: 8\n          }\n        })), keys.length > 1 ? React.createElement(Icon, {\n          className: \"dynamic-delete-button\",\n          type: \"minus-circle-o\",\n          disabled: keys.length === 1,\n          onClick: function onClick() {\n            return _this2.remove(k);\n          }\n        }) : null);\n      });\n      return React.createElement(Form, {\n        onSubmit: this.handleSubmit\n      }, formItems, React.createElement(FormItem, formItemLayoutWithOutLabel, React.createElement(Button, {\n        type: \"dashed\",\n        onClick: this.add,\n        style: {\n          width: '60%'\n        }\n      }, React.createElement(Icon, {\n        type: \"plus\"\n      }), \" Add field\")), React.createElement(FormItem, formItemLayoutWithOutLabel, React.createElement(Button, {\n        type: \"primary\",\n        htmlType: \"submit\"\n      }, \"Submit\")));\n    }\n  }]);\n\n  return DynamicFieldSet;\n}(React.Component);\n\nexport default Form.create()(DynamicFieldSet);","map":null,"metadata":{},"sourceType":"module"}