{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\n// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { FlexibleWidthXYPlot, Highlight, HorizontalGridLines, LineSeries, XAxis, YAxis } from 'react-vis';\nimport ShowcaseButton from '../showcase-components/showcase-button';\nimport { generateSeededRandom } from '../showcase-utils';\nvar seededRandom = generateSeededRandom(9);\nvar totalValues = 100;\n/**\n * Get the array of x and y pairs.\n * The function tries to avoid too large changes of the chart.\n * @param {number} total Total number of values.\n * @returns {Array} Array of data.\n * @private\n */\n\nfunction getRandomSeriesData(total) {\n  var result = [];\n  var lastY = seededRandom() * 40 - 20;\n  var y;\n  var firstY = lastY;\n\n  for (var i = 0; i < total; i++) {\n    y = seededRandom() * firstY - firstY / 2 + lastY;\n    result.push({\n      x: i,\n      y: y\n    });\n    lastY = y;\n  }\n\n  return result;\n}\n\nvar ZoomableChartExample =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ZoomableChartExample, _React$Component);\n\n  function ZoomableChartExample() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ZoomableChartExample);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ZoomableChartExample)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      lastDrawLocation: null,\n      series: [{\n        data: getRandomSeriesData(totalValues),\n        disabled: false,\n        title: 'Apples'\n      }, {\n        data: getRandomSeriesData(totalValues),\n        disabled: false,\n        title: 'Bananas'\n      }]\n    });\n\n    return _this;\n  }\n\n  _createClass(ZoomableChartExample, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          series = _this$state.series,\n          lastDrawLocation = _this$state.lastDrawLocation;\n      return React.createElement(\"div\", null, React.createElement(\"div\", null, React.createElement(FlexibleWidthXYPlot, {\n        animation: true,\n        xDomain: lastDrawLocation && [lastDrawLocation.left, lastDrawLocation.right],\n        yDomain: lastDrawLocation && [lastDrawLocation.bottom, lastDrawLocation.top],\n        height: 311\n      }, React.createElement(HorizontalGridLines, null), React.createElement(YAxis, null), React.createElement(XAxis, null), series.map(function (entry, i) {\n        return React.createElement(LineSeries, {\n          key: entry.title,\n          data: entry.data,\n          color: \"\".concat(i === 0 ? '#007bff' : '#52c41a')\n        });\n      }), React.createElement(Highlight, {\n        onBrushEnd: function onBrushEnd(area) {\n          return _this2.setState({\n            lastDrawLocation: area\n          });\n        },\n        onDrag: function onDrag(area) {\n          _this2.setState({\n            lastDrawLocation: {\n              bottom: lastDrawLocation.bottom + (area.top - area.bottom),\n              left: lastDrawLocation.left - (area.right - area.left),\n              right: lastDrawLocation.right - (area.right - area.left),\n              top: lastDrawLocation.top + (area.top - area.bottom)\n            }\n          });\n        }\n      }))), React.createElement(ShowcaseButton, {\n        buttonContent: 'Reset zoom',\n        onClick: function onClick() {\n          return _this2.setState({\n            lastDrawLocation: null\n          });\n        }\n      }));\n    }\n  }]);\n\n  return ZoomableChartExample;\n}(React.Component);\n\nexport { ZoomableChartExample as default };","map":null,"metadata":{},"sourceType":"module"}