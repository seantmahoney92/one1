{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport React from \"react\";\nimport { Table, Input, InputNumber, Popconfirm, Form } from 'antd';\nvar data = [];\n\nfor (var i = 0; i < 100; i++) {\n  data.push({\n    key: i.toString(),\n    name: \"Edrward \".concat(i),\n    age: 32,\n    address: \"London Park no. \".concat(i)\n  });\n}\n\nvar FormItem = Form.Item;\nvar EditableContext = React.createContext();\n\nvar EditableRow = function EditableRow(_ref) {\n  var form = _ref.form,\n      index = _ref.index,\n      props = _objectWithoutProperties(_ref, [\"form\", \"index\"]);\n\n  return React.createElement(EditableContext.Provider, {\n    value: form\n  }, React.createElement(\"tr\", props));\n};\n\nvar EditableFormRow = Form.create()(EditableRow);\n\nvar EditableCell =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(EditableCell, _React$Component);\n\n  function EditableCell() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EditableCell);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EditableCell)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"getInput\", function () {\n      if (_this.props.inputType === 'number') {\n        return React.createElement(InputNumber, null);\n      }\n\n      return React.createElement(Input, null);\n    });\n\n    return _this;\n  }\n\n  _createClass(EditableCell, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          editing = _this$props.editing,\n          dataIndex = _this$props.dataIndex,\n          title = _this$props.title,\n          inputType = _this$props.inputType,\n          record = _this$props.record,\n          index = _this$props.index,\n          restProps = _objectWithoutProperties(_this$props, [\"editing\", \"dataIndex\", \"title\", \"inputType\", \"record\", \"index\"]);\n\n      return React.createElement(EditableContext.Consumer, null, function (form) {\n        var getFieldDecorator = form.getFieldDecorator;\n        return React.createElement(\"td\", restProps, editing ? React.createElement(FormItem, {\n          style: {\n            margin: 0\n          }\n        }, getFieldDecorator(dataIndex, {\n          rules: [{\n            required: true,\n            message: \"Please Input \".concat(title, \"!\")\n          }],\n          initialValue: record[dataIndex]\n        })(_this2.getInput())) : restProps.children);\n      });\n    }\n  }]);\n\n  return EditableCell;\n}(React.Component);\n\nvar EditableTable =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(EditableTable, _React$Component2);\n\n  function EditableTable(props) {\n    var _this3;\n\n    _classCallCheck(this, EditableTable);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(EditableTable).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this3), \"isEditing\", function (record) {\n      return record.key === _this3.state.editingKey;\n    });\n\n    _defineProperty(_assertThisInitialized(_this3), \"cancel\", function () {\n      _this3.setState({\n        editingKey: ''\n      });\n    });\n\n    _this3.state = {\n      data: data,\n      editingKey: ''\n    };\n    _this3.columns = [{\n      title: 'name',\n      dataIndex: 'name',\n      width: '25%',\n      editable: true\n    }, {\n      title: 'age',\n      dataIndex: 'age',\n      width: '15%',\n      editable: true\n    }, {\n      title: 'address',\n      dataIndex: 'address',\n      width: '40%',\n      editable: true\n    }, {\n      title: 'operation',\n      dataIndex: 'operation',\n      render: function render(text, record) {\n        var editable = _this3.isEditing(record);\n\n        return React.createElement(\"div\", null, editable ? React.createElement(\"span\", null, React.createElement(EditableContext.Consumer, null, function (form) {\n          return React.createElement(\"a\", {\n            href: \"javascript:;\",\n            onClick: function onClick() {\n              return _this3.save(form, record.key);\n            },\n            style: {\n              marginRight: 8\n            }\n          }, \"Save\");\n        }), React.createElement(Popconfirm, {\n          title: \"Sure to cancel?\",\n          onConfirm: function onConfirm() {\n            return _this3.cancel(record.key);\n          }\n        }, React.createElement(\"a\", null, \"Cancel\"))) : React.createElement(\"a\", {\n          onClick: function onClick() {\n            return _this3.edit(record.key);\n          }\n        }, \"Edit\"));\n      }\n    }];\n    return _this3;\n  }\n\n  _createClass(EditableTable, [{\n    key: \"save\",\n    value: function save(form, key) {\n      var _this4 = this;\n\n      form.validateFields(function (error, row) {\n        if (error) {\n          return;\n        }\n\n        var newData = _toConsumableArray(_this4.state.data);\n\n        var index = newData.findIndex(function (item) {\n          return key === item.key;\n        });\n\n        if (index > -1) {\n          var item = newData[index];\n          newData.splice(index, 1, _objectSpread({}, item, row));\n\n          _this4.setState({\n            data: newData,\n            editingKey: ''\n          });\n        } else {\n          newData.push(row);\n\n          _this4.setState({\n            data: newData,\n            editingKey: ''\n          });\n        }\n      });\n    }\n  }, {\n    key: \"edit\",\n    value: function edit(key) {\n      this.setState({\n        editingKey: key\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      var components = {\n        body: {\n          row: EditableFormRow,\n          cell: EditableCell\n        }\n      };\n      var columns = this.columns.map(function (col) {\n        if (!col.editable) {\n          return col;\n        }\n\n        return _objectSpread({}, col, {\n          onCell: function onCell(record) {\n            return {\n              record: record,\n              inputType: col.dataIndex === 'age' ? 'number' : 'text',\n              dataIndex: col.dataIndex,\n              title: col.title,\n              editing: _this5.isEditing(record)\n            };\n          }\n        });\n      });\n      return React.createElement(Table, {\n        components: components,\n        bordered: true,\n        dataSource: this.state.data,\n        columns: columns,\n        rowClassName: \"editable-row\"\n      });\n    }\n  }]);\n\n  return EditableTable;\n}(React.Component);\n\nexport default EditableTable;","map":null,"metadata":{},"sourceType":"module"}