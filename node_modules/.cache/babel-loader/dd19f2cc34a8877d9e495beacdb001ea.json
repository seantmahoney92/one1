{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nimport Sankey from 'react-vis/dist/sankey';\nvar BLURRED_NODE_OPACITY = 0.8;\nvar FOCUSED_NODE_OPACITY = 1;\nvar nodes = [{\n  name: 'a'\n}, {\n  name: 'b'\n}, {\n  name: 'c'\n}];\nvar links = [{\n  source: 0,\n  target: 1,\n  value: 10\n}, {\n  source: 0,\n  target: 2,\n  value: 20\n}, {\n  source: 1,\n  target: 2,\n  value: 20\n}];\n\nvar VoronoiSankeyExample =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(VoronoiSankeyExample, _React$Component);\n\n  function VoronoiSankeyExample() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, VoronoiSankeyExample);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(VoronoiSankeyExample)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      activeNode: null\n    });\n\n    return _this;\n  }\n\n  _createClass(VoronoiSankeyExample, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var activeNode = this.state.activeNode; // Note: d3.sankey currently mutates the `nodes` and `links` arrays, which doesn't play nice\n      // with React's single-direction data flow. We create a copy of each before we pass to the sankey\n      // component, just to be sure.\n\n      return React.createElement(\"div\", null, React.createElement(\"div\", null, \"\".concat(activeNode ? activeNode.name : 'None', \" selected\")), React.createElement(Sankey, {\n        className: \"m-auto\",\n        nodes: nodes.map(function (d) {\n          var isActiveNode = activeNode && d.name === activeNode.name;\n          return _objectSpread({}, d, {\n            opacity: isActiveNode ? FOCUSED_NODE_OPACITY : BLURRED_NODE_OPACITY,\n            name: isActiveNode ? \"!\".concat(d.name, \"!\") : d.name\n          });\n        }),\n        links: links.map(function (d) {\n          return _objectSpread({}, d);\n        }),\n        width: 200,\n        height: 200,\n        hasVoronoi: true,\n        onValueMouseOver: function onValueMouseOver(node) {\n          return _this2.setState({\n            activeNode: node\n          });\n        },\n        onValueMouseOut: function onValueMouseOut() {\n          return _this2.setState({\n            activeNode: null\n          });\n        }\n      }));\n    }\n  }]);\n\n  return VoronoiSankeyExample;\n}(React.Component);\n\nexport { VoronoiSankeyExample as default };","map":null,"metadata":{},"sourceType":"module"}