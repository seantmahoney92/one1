{"ast":null,"code":"import React from \"react\";\n// Copyright (c) 2016 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { FlexibleWidthXYPlot, HeatmapSeries, LabelSeries, XAxis, YAxis } from 'react-vis';\nimport { scaleLinear } from 'd3-scale';\nvar alphabet = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'];\nvar data = alphabet.reduce(function (acc, letter1, idx) {\n  return acc.concat(alphabet.map(function (letter2, jdx) {\n    return {\n      x: \"\".concat(letter1, \"1\"),\n      y: \"\".concat(letter2, \"2\"),\n      color: (idx + jdx) % Math.floor(jdx / idx) || idx\n    };\n  }));\n}, []);\n\nvar _data$reduce = data.reduce(function (acc, row) {\n  return {\n    min: Math.min(acc.min, row.color),\n    max: Math.max(acc.max, row.color)\n  };\n}, {\n  min: Infinity,\n  max: -Infinity\n}),\n    min = _data$reduce.min,\n    max = _data$reduce.max;\n\nexport default function LabeledHeatmap() {\n  var exampleColorScale = scaleLinear().domain([min, (min + max) / 2, max]).range(['#007bff', '#52c41a', '#f5222d']);\n  return React.createElement(FlexibleWidthXYPlot, {\n    xType: \"ordinal\",\n    xDomain: alphabet.map(function (letter) {\n      return \"\".concat(letter, \"1\");\n    }),\n    yType: \"ordinal\",\n    yDomain: alphabet.map(function (letter) {\n      return \"\".concat(letter, \"2\");\n    }).reverse(),\n    margin: 50,\n    height: 355\n  }, React.createElement(XAxis, {\n    orientation: \"top\",\n    style: {\n      strokeWidth: 0.5\n    }\n  }), React.createElement(YAxis, {\n    style: {\n      strokeWidth: 0.5\n    }\n  }), React.createElement(HeatmapSeries, {\n    colorType: \"literal\",\n    getColor: function getColor(d) {\n      return exampleColorScale(d.color);\n    },\n    style: {\n      stroke: 'white',\n      strokeWidth: '1px',\n      rectStyle: {\n        rx: 0,\n        ry: 0\n      }\n    },\n    className: \"heatmap-series-example\",\n    data: data\n  }), React.createElement(LabelSeries, {\n    data: data,\n    labelAnchorX: \"middle\",\n    labelAnchorY: \"baseline\",\n    getLabel: function getLabel(d) {\n      return \"\".concat(d.color);\n    }\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}