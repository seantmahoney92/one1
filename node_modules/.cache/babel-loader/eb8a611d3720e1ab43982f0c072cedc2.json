{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React from \"react\";\nimport { Avatar, Badge, Divider, Drawer, Dropdown, Layout, List, Menu, Popconfirm, Row, Switch, Tooltip } from 'antd';\nimport { Book, LogOut, Triangle } from 'react-feather';\nimport { capitalize, lowercase } from '../lib/helpers';\nimport { useEffect, useState } from 'react';\nimport DashHeader from './styles/Header';\nimport Inner from './styles/Sidebar';\nimport Link from 'next/link';\nimport Routes from '../lib/routes';\nimport { useAppState } from './shared/AppProvider';\nimport { withRouter } from 'next/router';\nvar SubMenu = Menu.SubMenu;\nvar Header = Layout.Header,\n    Sider = Layout.Sider;\nvar rootSubMenuKeys = [];\n\nvar getKey = function getKey(name, index) {\n  var string = \"\".concat(name, \"-\").concat(index);\n  var key = string.replace(' ', '-');\n  return key.charAt(0).toLowerCase() + key.slice(1);\n};\n\nvar UserMenu = React.createElement(Menu, null, React.createElement(Menu.Item, null, \"Settings\"), React.createElement(Menu.Item, null, \"Profile\"), React.createElement(Menu.Item, null, \"Notifications\"));\n\nvar SidebarContent = function SidebarContent(_ref) {\n  var sidebarTheme = _ref.sidebarTheme,\n      sidebarMode = _ref.sidebarMode,\n      sidebarIcons = _ref.sidebarIcons,\n      collapsed = _ref.collapsed,\n      router = _ref.router;\n\n  var _useAppState = useAppState(),\n      _useAppState2 = _slicedToArray(_useAppState, 2),\n      state = _useAppState2[0],\n      dispatch = _useAppState2[1];\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      openKeys = _useState2[0],\n      setOpenKeys = _useState2[1];\n\n  var _useState3 = useState(Routes),\n      _useState4 = _slicedToArray(_useState3, 1),\n      appRoutes = _useState4[0];\n\n  var pathname = router.pathname;\n\n  var badgeTemplate = function badgeTemplate(badge) {\n    return React.createElement(Badge, {\n      count: badge.value\n    });\n  };\n\n  useEffect(function () {\n    appRoutes.forEach(function (route, index) {\n      var isCurrentPath = pathname.indexOf(lowercase(route.name)) > -1 ? true : false;\n      var key = getKey(route.name, index);\n      rootSubMenuKeys.push(key);\n      if (isCurrentPath) setOpenKeys([].concat(_toConsumableArray(openKeys), [key]));\n    });\n  }, []);\n\n  var onOpenChange = function onOpenChange(openKeys) {\n    var latestOpenKey = openKeys.slice(-1);\n\n    if (rootSubMenuKeys.indexOf(latestOpenKey) === -1) {\n      setOpenKeys(_toConsumableArray(latestOpenKey));\n    } else {\n      setOpenKeys(latestOpenKey ? _toConsumableArray(latestOpenKey) : []);\n    }\n  };\n\n  var menu = React.createElement(React.Fragment, null, React.createElement(Menu, {\n    theme: sidebarTheme,\n    className: \"border-0 scroll-y\",\n    style: {\n      flex: 1,\n      height: '100%'\n    },\n    mode: sidebarMode,\n    openKeys: openKeys,\n    onOpenChange: onOpenChange\n  }, appRoutes.map(function (route, index) {\n    var hasChildren = route.children ? true : false;\n    if (!hasChildren) return React.createElement(Menu.Item, {\n      key: getKey(route.name, index),\n      className: pathname === route.path ? 'ant-menu-item-selected' : '',\n      onClick: function onClick() {\n        setOpenKeys([getKey(route.name, index)]);\n        if (state.mobile) dispatch({\n          type: 'mobileDrawer'\n        });\n      }\n    }, React.createElement(Link, {\n      href: route.path,\n      prefetch: true\n    }, React.createElement(\"a\", null, sidebarIcons && React.createElement(\"span\", {\n      className: \"anticon\"\n    }, route.icon), React.createElement(\"span\", {\n      className: \"mr-auto\"\n    }, capitalize(route.name)), route.badge && badgeTemplate(route.badge))));\n    if (hasChildren) return React.createElement(SubMenu, {\n      key: getKey(route.name, index),\n      title: React.createElement(\"span\", null, sidebarIcons && React.createElement(\"span\", {\n        className: \"anticon\"\n      }, route.icon), React.createElement(\"span\", null, capitalize(route.name)), route.badge && badgeTemplate(route.badge))\n    }, route.children.map(function (subitem, index) {\n      return React.createElement(Menu.Item, {\n        key: getKey(subitem.name, index),\n        className: pathname === subitem.path ? 'ant-menu-item-selected' : '',\n        onClick: function onClick() {\n          if (state.mobile) dispatch({\n            type: 'mobileDrawer'\n          });\n        }\n      }, React.createElement(Link, {\n        href: \"\".concat(subitem.path ? subitem.path : ''),\n        prefetch: true\n      }, React.createElement(\"a\", null, React.createElement(\"span\", {\n        className: \"mr-auto\"\n      }, capitalize(subitem.name)), subitem.badge && badgeTemplate(subitem.badge))));\n    }));\n  })), React.createElement(Divider, {\n    className: \"m-0\",\n    style: {\n      display: \"\".concat(sidebarTheme === 'dark' ? 'none' : '')\n    }\n  }), React.createElement(\"div\", {\n    className: \"py-3 px-4 bg-\".concat(sidebarTheme)\n  }, React.createElement(Row, {\n    type: \"flex\",\n    align: \"middle\",\n    justify: \"space-around\"\n  }, React.createElement(Dropdown, {\n    overlay: UserMenu\n  }, React.createElement(\"span\", null, React.createElement(Badge, {\n    count: 6,\n    overflowCount: 5,\n    style: {\n      color: 'rgb(245, 106, 0)',\n      backgroundColor: 'rgb(253, 227, 207)'\n    }\n  }, React.createElement(Avatar, {\n    shape: \"circle\",\n    size: 40,\n    src: \"/static/images/avatar.jpg\"\n  })))), !collapsed && React.createElement(React.Fragment, null, React.createElement(\"span\", {\n    className: \"mr-auto\"\n  }), React.createElement(Link, {\n    href: \"https://one-readme.fusepx.com\"\n  }, React.createElement(\"a\", {\n    className: \"px-3 \".concat(sidebarTheme === 'dark' ? 'text-white' : 'text-body')\n  }, React.createElement(Tooltip, {\n    title: \"Help\"\n  }, React.createElement(Book, {\n    size: 20,\n    strokeWidth: 1\n  })))), React.createElement(Popconfirm, {\n    placement: \"top\",\n    title: \"Are you sure you want to sign out?\",\n    onConfirm: function onConfirm() {\n      return router.push('/signin');\n    },\n    okText: \"Yes\",\n    cancelText: \"Cancel\"\n  }, React.createElement(\"a\", {\n    className: \"px-3 \".concat(sidebarTheme === 'dark' ? 'text-white' : 'text-body')\n  }, React.createElement(LogOut, {\n    size: 20,\n    strokeWidth: 1\n  })))))));\n  return React.createElement(React.Fragment, null, React.createElement(Inner, null, !state.mobile && React.createElement(Sider, {\n    width: 240,\n    className: \"bg-\".concat(sidebarTheme),\n    theme: sidebarTheme,\n    collapsed: collapsed\n  }, menu), React.createElement(Drawer, {\n    closable: false,\n    width: 240,\n    placement: \"left\",\n    onClose: function onClose() {\n      return dispatch({\n        type: 'mobileDrawer'\n      });\n    },\n    visible: state.mobileDrawer,\n    className: \"chat-drawer\"\n  }, React.createElement(Inner, null, React.createElement(\"div\", {\n    css: \"\\n                overflow: hidden;\\n                flex: 1 1 auto;\\n                flex-direction: column;\\n                display: flex;\\n                height: 100vh;\\n              \"\n  }, React.createElement(DashHeader, null, React.createElement(Header, null, React.createElement(Link, {\n    href: \"/\"\n  }, React.createElement(\"a\", {\n    className: \"brand\"\n  }, React.createElement(Triangle, {\n    size: 24,\n    strokeWidth: 1\n  }), React.createElement(\"strong\", {\n    className: \"mx-1\",\n    css: \"\\n                          display: inline;\\n                        \"\n  }, state.name))))), menu))), React.createElement(Drawer, {\n    title: \"Settings\",\n    placement: \"right\",\n    closable: true,\n    width: 300,\n    onClose: function onClose() {\n      return dispatch({\n        type: 'options'\n      });\n    },\n    visible: state.optionDrawer\n  }, React.createElement(List.Item, {\n    actions: [React.createElement(Switch, {\n      size: \"small\",\n      checked: !!state.boxed,\n      onChange: function onChange(checked) {\n        return dispatch({\n          type: 'boxed'\n        });\n      }\n    })]\n  }, React.createElement(\"span\", {\n    css: \"\\n                -webkit-box-flex: 1;\\n                -webkit-flex: 1 0;\\n                -ms-flex: 1 0;\\n                flex: 1 0;\\n              \"\n  }, \"Boxed view\")), React.createElement(List.Item, {\n    actions: [React.createElement(Switch, {\n      size: \"small\",\n      checked: !!state.darkSidebar,\n      disabled: state.weakColor,\n      onChange: function onChange(checked) {\n        return dispatch({\n          type: 'sidebarTheme'\n        });\n      }\n    })]\n  }, React.createElement(\"span\", {\n    css: \"\\n                -webkit-box-flex: 1;\\n                -webkit-flex: 1 0;\\n                -ms-flex: 1 0;\\n                flex: 1 0;\\n              \"\n  }, \"Dark sidebar menu\")), React.createElement(List.Item, {\n    actions: [React.createElement(Switch, {\n      size: \"small\",\n      checked: !!state.sidebarPopup,\n      disabled: state.collapsed,\n      onChange: function onChange(checked) {\n        return dispatch({\n          type: 'sidebarPopup'\n        });\n      }\n    })]\n  }, React.createElement(\"span\", {\n    css: \"\\n                -webkit-box-flex: 1;\\n                -webkit-flex: 1 0;\\n                -ms-flex: 1 0;\\n                flex: 1 0;\\n              \"\n  }, \"Popup sub menus\")), React.createElement(List.Item, {\n    actions: [React.createElement(Switch, {\n      size: \"small\",\n      checked: !!state.sidebarIcons,\n      disabled: state.collapsed,\n      onChange: function onChange(checked) {\n        return dispatch({\n          type: 'sidebarIcons'\n        });\n      }\n    })]\n  }, React.createElement(\"span\", {\n    css: \"\\n                -webkit-box-flex: 1;\\n                -webkit-flex: 1 0;\\n                -ms-flex: 1 0;\\n                flex: 1 0;\\n              \"\n  }, \"Sidebar menu icons\")), React.createElement(List.Item, {\n    actions: [React.createElement(Switch, {\n      size: \"small\",\n      checked: !!state.collapsed,\n      onChange: function onChange(checked) {\n        return dispatch({\n          type: 'collapse'\n        });\n      }\n    })]\n  }, React.createElement(\"span\", {\n    css: \"\\n                -webkit-box-flex: 1;\\n                -webkit-flex: 1 0;\\n                -ms-flex: 1 0;\\n                flex: 1 0;\\n              \"\n  }, \"Collapsed sidebar menu\")), React.createElement(List.Item, {\n    actions: [React.createElement(Switch, {\n      size: \"small\",\n      checked: !!state.weakColor,\n      onChange: function onChange(checked) {\n        return dispatch({\n          type: 'weak',\n          value: checked\n        });\n      }\n    })]\n  }, React.createElement(\"span\", {\n    css: \"\\n                -webkit-box-flex: 1;\\n                -webkit-flex: 1 0;\\n                -ms-flex: 1 0;\\n                flex: 1 0;\\n              \"\n  }, \"Weak colors\")))));\n};\n\nexport default withRouter(SidebarContent);","map":null,"metadata":{},"sourceType":"module"}