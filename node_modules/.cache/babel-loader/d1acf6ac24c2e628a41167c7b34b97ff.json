{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\n// Copyright (c) 2016 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { Row, Select } from 'antd';\nimport D3FlareData from '../datasets/d3-flare-example.json';\nimport ShowcaseButton from '../showcase-components/showcase-button';\nimport Treemap from 'react-vis/dist/treemap';\nvar Option = Select.Option;\nvar MODE = ['circlePack', 'partition', 'partition-pivot', 'squarify', 'resquarify', 'slice', 'dice', 'slicedice', 'binary'];\nvar STYLES = {\n  SVG: {\n    stroke: '#fff',\n    strokeWidth: '0.25',\n    strokeOpacity: 0.5\n  },\n  DOM: {\n    border: 'thin solid #fff'\n  }\n};\n\nvar SimpleTreemapExample =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SimpleTreemapExample, _React$Component);\n\n  function SimpleTreemapExample() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SimpleTreemapExample);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SimpleTreemapExample)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      modeIndex: MODE[0],\n      useSVG: true\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateModeIndex\", function (value) {\n      _this.setState({\n        modeIndex: value\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(SimpleTreemapExample, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          modeIndex = _this$state.modeIndex,\n          useSVG = _this$state.useSVG;\n      return React.createElement(\"div\", {\n        className: \"centered-and-flexed\"\n      }, React.createElement(Row, {\n        type: \"flex\",\n        align: \"middle\",\n        justify: \"center\"\n      }, React.createElement(Select, {\n        defaultValue: modeIndex,\n        onChange: this.updateModeIndex,\n        size: \"small\",\n        className: \"mx-3\"\n      }, MODE.map(function (mode, index) {\n        return React.createElement(Option, {\n          value: mode,\n          key: index\n        }, mode);\n      })), React.createElement(ShowcaseButton, {\n        onClick: function onClick() {\n          return _this2.setState({\n            useSVG: !useSVG\n          });\n        },\n        buttonContent: useSVG ? 'Use dom' : 'use SVG'\n      })), React.createElement(Row, {\n        type: \"flex\",\n        align: \"middle\",\n        justify: \"center\"\n      }, React.createElement(Treemap, _extends({\n        className: \"m-auto d-block\"\n      }, {\n        animation: true,\n        className: 'nested-tree-example',\n        colorType: 'literal',\n        colorRange: ['#007bff'],\n        data: D3FlareData,\n        mode: modeIndex,\n        renderMode: useSVG ? 'SVG' : 'DOM',\n        height: 300,\n        width: 350,\n        margin: 10,\n        getSize: function getSize(d) {\n          return d.value;\n        },\n        getColor: function getColor(d) {\n          return d.hex;\n        },\n        style: STYLES[useSVG ? 'SVG' : 'DOM']\n      }))));\n    }\n  }]);\n\n  return SimpleTreemapExample;\n}(React.Component);\n\nexport { SimpleTreemapExample as default };","map":null,"metadata":{},"sourceType":"module"}