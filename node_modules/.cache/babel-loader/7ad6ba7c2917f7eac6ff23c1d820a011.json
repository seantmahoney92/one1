{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React from \"react\";\nimport { ArrowDown, ArrowDownLeft, ArrowDownRight, ArrowLeft, ArrowRight, ArrowUp, ArrowUpLeft, ArrowUpRight } from 'react-feather';\nimport { Card, Col, Divider, Row, Skeleton } from 'antd';\nimport { capitalize, getWeather, getWeatherIcon, windDirection } from '../../lib/helpers';\nimport { useEffect, useState } from 'react';\nimport format from 'date-fns/format';\n\nvar DescriptionItem = function DescriptionItem(_ref) {\n  var title = _ref.title,\n      content = _ref.content;\n  return React.createElement(Row, {\n    type: \"flex\",\n    align: \"middle\",\n    justify: \"space-between\",\n    className: \"mb-2\"\n  }, React.createElement(\"span\", null, title), React.createElement(\"small\", null, content));\n};\n\nvar ForecastItem = function ForecastItem(_ref2) {\n  var content = _ref2.content;\n  return React.createElement(\"span\", {\n    css: \"\\n      display: block;\\n    \"\n  }, content);\n};\n\nvar getWindDirection = function getWindDirection(degree) {\n  var direction = windDirection(degree);\n\n  switch (direction) {\n    case 'n':\n      return React.createElement(ArrowUp, {\n        size: 20,\n        strokeWidth: 1\n      });\n\n    case 'ne':\n      return React.createElement(ArrowUpRight, {\n        size: 20,\n        strokeWidth: 1\n      });\n\n    case 'e':\n      return React.createElement(ArrowRight, {\n        size: 20,\n        strokeWidth: 1\n      });\n\n    case 'se':\n      return React.createElement(ArrowDownRight, {\n        size: 20,\n        strokeWidth: 1\n      });\n\n    case 's':\n      return React.createElement(ArrowDown, {\n        size: 20,\n        strokeWidth: 1\n      });\n\n    case 'sw':\n      return React.createElement(ArrowDownLeft, {\n        size: 20,\n        strokeWidth: 1\n      });\n\n    case 'w':\n      return React.createElement(ArrowLeft, {\n        size: 20,\n        strokeWidth: 1\n      });\n\n    case 'nw':\n      return React.createElement(ArrowUpLeft, {\n        size: 20,\n        strokeWidth: 1\n      });\n\n    default:\n      break;\n  }\n};\n\nvar WeatherCard = function WeatherCard(_ref3) {\n  var city = _ref3.city,\n      country = _ref3.country,\n      days = _ref3.days;\n\n  var _useState = useState(undefined),\n      _useState2 = _slicedToArray(_useState, 2),\n      current = _useState2[0],\n      setCurrent = _useState2[1];\n\n  var _useState3 = useState(undefined),\n      _useState4 = _slicedToArray(_useState3, 2),\n      forecast = _useState4[0],\n      setForecast = _useState4[1];\n\n  useEffect(function () {\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var _forecast, _current;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return getWeather(city, country, days);\n\n            case 3:\n              _forecast = _context.sent;\n\n              if (_forecast) {\n                _current = _forecast.list[0];\n                setCurrent(_current);\n                setForecast(_forecast);\n              }\n\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(_context.t0);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }))();\n  }, [city, country, days]);\n  return React.createElement(Card, {\n    bodyStyle: {\n      padding: 0\n    },\n    className: \"mb-4\"\n  }, React.createElement(Skeleton, {\n    loading: !current && !forecast,\n    active: true,\n    className: \"p-4\"\n  }, current && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"p-4\"\n  }, React.createElement(Row, {\n    type: \"flex\",\n    align: \"middle\",\n    justify: \"space-between\",\n    className: \"mb-4\"\n  }, React.createElement(Col, null, forecast && React.createElement(\"h5\", {\n    className: \"mb-0 font-weight-bold\"\n  }, \"\".concat(forecast.city.name, \", \").concat(forecast.city.country)), React.createElement(\"h6\", {\n    className: \"mb-0\"\n  }, format(current.dt * 1000, 'MMMM Do YYYY')), React.createElement(\"small\", null, capitalize(current.weather[0].description))), React.createElement(Col, {\n    className: \"text-right\"\n  }, React.createElement(\"h3\", {\n    className: \"font-weight-light mb-0\"\n  }, React.createElement(\"span\", null, current.main.temp, \"\\xB0\")))), React.createElement(Row, {\n    type: \"flex\",\n    align: \"middle\",\n    justify: \"space-between\",\n    gutter: 16\n  }, _Object$keys(current.main).map(function (key, index) {\n    return React.createElement(Col, {\n      xs: 12,\n      key: index\n    }, React.createElement(DescriptionItem, {\n      title: capitalize(key.replace(/_/g, ' ')),\n      content: current.main[key]\n    }));\n  }))), React.createElement(Divider, {\n    orientation: \"left\"\n  }, React.createElement(\"small\", null, \"Forecast\")), React.createElement(\"div\", {\n    className: \"p-4\"\n  }, forecast && React.createElement(Row, {\n    type: \"flex\",\n    align: \"middle\",\n    justify: \"space-between\",\n    className: \"text-center\",\n    style: {\n      flexFlow: 'initial'\n    }\n  }, forecast.list.map(function (day, index) {\n    return index !== 0 && React.createElement(\"p\", {\n      className: \"text-center mb-0\",\n      key: index\n    }, React.createElement(ForecastItem, {\n      content: format(day.dt * 1000, 'ddd')\n    }), React.createElement(ForecastItem, {\n      content: day.weather.description\n    }), React.createElement(ForecastItem, {\n      content: getWindDirection(day.wind.deg)\n    }), React.createElement(ForecastItem, {\n      content: getWeatherIcon(day.weather[0].icon, 50)\n    }), React.createElement(ForecastItem, {\n      content: \"\".concat(day.main.temp, \"\\xB0\")\n    }));\n  }))))));\n};\n\nexport default WeatherCard;","map":null,"metadata":{},"sourceType":"module"}