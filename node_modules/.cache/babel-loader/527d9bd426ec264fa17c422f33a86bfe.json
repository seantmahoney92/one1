{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nimport { Tag, Input, Tooltip, Icon } from 'antd';\n\nvar EditableTagGroup =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(EditableTagGroup, _React$Component);\n\n  function EditableTagGroup() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EditableTagGroup);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EditableTagGroup)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      tags: ['Unremovable', 'Tag 2', 'Tag 3'],\n      inputVisible: false,\n      inputValue: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClose\", function (removedTag) {\n      var tags = _this.state.tags.filter(function (tag) {\n        return tag !== removedTag;\n      });\n\n      console.log(tags);\n\n      _this.setState({\n        tags: tags\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"showInput\", function () {\n      _this.setState({\n        inputVisible: true\n      }, function () {\n        return _this.input.focus();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleInputChange\", function (e) {\n      _this.setState({\n        inputValue: e.target.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleInputConfirm\", function () {\n      var state = _this.state;\n      var inputValue = state.inputValue;\n      var tags = state.tags;\n\n      if (inputValue && tags.indexOf(inputValue) === -1) {\n        tags = [].concat(_toConsumableArray(tags), [inputValue]);\n      }\n\n      console.log(tags);\n\n      _this.setState({\n        tags: tags,\n        inputVisible: false,\n        inputValue: ''\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"saveInputRef\", function (input) {\n      return _this.input = input;\n    });\n\n    return _this;\n  }\n\n  _createClass(EditableTagGroup, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          tags = _this$state.tags,\n          inputVisible = _this$state.inputVisible,\n          inputValue = _this$state.inputValue;\n      return React.createElement(\"div\", null, tags.map(function (tag, index) {\n        var isLongTag = tag.length > 20;\n        var tagElem = React.createElement(Tag, {\n          key: tag,\n          closable: index !== 0,\n          afterClose: function afterClose() {\n            return _this2.handleClose(tag);\n          }\n        }, isLongTag ? \"\".concat(tag.slice(0, 20), \"...\") : tag);\n        return isLongTag ? React.createElement(Tooltip, {\n          title: tag,\n          key: tag\n        }, tagElem) : tagElem;\n      }), inputVisible && React.createElement(Input, {\n        ref: this.saveInputRef,\n        type: \"text\",\n        size: \"small\",\n        style: {\n          width: 78\n        },\n        value: inputValue,\n        onChange: this.handleInputChange,\n        onBlur: this.handleInputConfirm,\n        onPressEnter: this.handleInputConfirm\n      }), !inputVisible && React.createElement(Tag, {\n        onClick: this.showInput,\n        style: {\n          background: '#fff',\n          borderStyle: 'dashed'\n        }\n      }, React.createElement(Icon, {\n        type: \"plus\"\n      }), \" New Tag\"));\n    }\n  }]);\n\n  return EditableTagGroup;\n}(React.Component);\n\nexport default EditableTagGroup;","map":null,"metadata":{},"sourceType":"module"}