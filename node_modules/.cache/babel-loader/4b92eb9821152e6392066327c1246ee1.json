{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport React from \"react\";\n// Copyright (c) 2016 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { DecorativeAxis, FlexibleWidthXYPlot, LineSeries } from 'react-vis';\nimport CarData from '../datasets/car-data.json';\nimport { scaleLinear } from 'd3-scale';\nvar DEFAULT_DOMAIN = {\n  min: Infinity,\n  max: -Infinity\n}; // begin by figuring out the domain of each of the columns\n\nvar domains = CarData.reduce(function (res, row) {\n  _Object$keys(row).forEach(function (key) {\n    if (!res[key]) {\n      res[key] = _objectSpread({}, DEFAULT_DOMAIN);\n    }\n\n    res[key] = {\n      min: Math.min(res[key].min, row[key]),\n      max: Math.max(res[key].max, row[key])\n    };\n  });\n\n  return res;\n}, {}); // use that to generate columns that map the data to a unit scale\n\nvar scales = _Object$keys(domains).reduce(function (res, key) {\n  var domain = domains[key];\n  res[key] = scaleLinear().domain([domain.min, domain.max]).range([0, 1]);\n  return res;\n}, {}); // break each object into an array and rescale it\n\n\nvar mappedData = CarData.map(function (row) {\n  return _Object$keys(row).filter(function (key) {\n    return key !== 'name';\n  }).map(function (key) {\n    return {\n      x: key,\n      y: scales[key](Number(row[key]))\n    };\n  });\n});\nvar MARGIN = {\n  left: 10,\n  right: 10,\n  top: 10,\n  bottom: 10\n};\n\nfunction ParallelCoordinatesExample(props) {\n  return React.createElement(FlexibleWidthXYPlot, {\n    height: 300,\n    xType: \"ordinal\",\n    margin: MARGIN,\n    className: \"parallel-coordinates-example\"\n  }, mappedData.map(function (series, index) {\n    return React.createElement(LineSeries, {\n      color: \"#007bff\",\n      data: series,\n      key: \"series-\".concat(index)\n    });\n  }), mappedData[0].map(function (cell, index) {\n    return React.createElement(DecorativeAxis, {\n      key: \"\".concat(index, \"-axis\"),\n      axisStart: {\n        x: cell.x,\n        y: 0\n      },\n      axisEnd: {\n        x: cell.x,\n        y: 1\n      },\n      axisDomain: [domains[cell.x].min, domains[cell.x].max]\n    });\n  }));\n}\n\nexport default ParallelCoordinatesExample;","map":null,"metadata":{},"sourceType":"module"}