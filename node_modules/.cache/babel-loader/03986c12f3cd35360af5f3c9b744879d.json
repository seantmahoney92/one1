{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport React from \"react\";\nimport { Table, Input, Button, Popconfirm, Form } from 'antd';\nvar FormItem = Form.Item;\nvar EditableContext = React.createContext();\n\nvar EditableRow = function EditableRow(_ref) {\n  var form = _ref.form,\n      index = _ref.index,\n      props = _objectWithoutProperties(_ref, [\"form\", \"index\"]);\n\n  return React.createElement(EditableContext.Provider, {\n    value: form\n  }, React.createElement(\"tr\", props));\n};\n\nvar EditableFormRow = Form.create()(EditableRow);\n\nvar EditableCell =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(EditableCell, _React$Component);\n\n  function EditableCell() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EditableCell);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EditableCell)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      editing: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleEdit\", function () {\n      var editing = !_this.state.editing;\n\n      _this.setState({\n        editing: editing\n      }, function () {\n        if (editing) {\n          _this.input.focus();\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClickOutside\", function (e) {\n      var editing = _this.state.editing;\n\n      if (editing && _this.cell !== e.target && !_this.cell.contains(e.target)) {\n        _this.save();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"save\", function () {\n      var _this$props = _this.props,\n          record = _this$props.record,\n          handleSave = _this$props.handleSave;\n\n      _this.form.validateFields(function (error, values) {\n        if (error) {\n          return;\n        }\n\n        _this.toggleEdit();\n\n        handleSave(_objectSpread({}, record, values));\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(EditableCell, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.editable) {\n        document.addEventListener('click', this.handleClickOutside, true);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.props.editable) {\n        document.removeEventListener('click', this.handleClickOutside, true);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var editing = this.state.editing;\n\n      var _this$props2 = this.props,\n          editable = _this$props2.editable,\n          dataIndex = _this$props2.dataIndex,\n          title = _this$props2.title,\n          record = _this$props2.record,\n          index = _this$props2.index,\n          handleSave = _this$props2.handleSave,\n          restProps = _objectWithoutProperties(_this$props2, [\"editable\", \"dataIndex\", \"title\", \"record\", \"index\", \"handleSave\"]);\n\n      return React.createElement(\"td\", _extends({\n        ref: function ref(node) {\n          return _this2.cell = node;\n        }\n      }, restProps), editable ? React.createElement(EditableContext.Consumer, null, function (form) {\n        _this2.form = form;\n        return editing ? React.createElement(FormItem, {\n          style: {\n            margin: 0\n          }\n        }, form.getFieldDecorator(dataIndex, {\n          rules: [{\n            required: true,\n            message: \"\".concat(title, \" is required.\")\n          }],\n          initialValue: record[dataIndex]\n        })(React.createElement(Input, {\n          ref: function ref(node) {\n            return _this2.input = node;\n          },\n          onPressEnter: _this2.save\n        }))) : React.createElement(\"div\", {\n          className: \"editable-cell-value-wrap\",\n          style: {\n            paddingRight: 24\n          },\n          onClick: _this2.toggleEdit\n        }, restProps.children);\n      }) : restProps.children);\n    }\n  }]);\n\n  return EditableCell;\n}(React.Component);\n\nvar EditableTable =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(EditableTable, _React$Component2);\n\n  function EditableTable(props) {\n    var _this3;\n\n    _classCallCheck(this, EditableTable);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(EditableTable).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this3), \"handleDelete\", function (key) {\n      var dataSource = _toConsumableArray(_this3.state.dataSource);\n\n      _this3.setState({\n        dataSource: dataSource.filter(function (item) {\n          return item.key !== key;\n        })\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this3), \"handleAdd\", function () {\n      var _this3$state = _this3.state,\n          count = _this3$state.count,\n          dataSource = _this3$state.dataSource;\n      var newData = {\n        key: count,\n        name: \"Edward King \".concat(count),\n        age: 32,\n        address: \"London, Park Lane no. \".concat(count)\n      };\n\n      _this3.setState({\n        dataSource: [].concat(_toConsumableArray(dataSource), [newData]),\n        count: count + 1\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this3), \"handleSave\", function (row) {\n      var newData = _toConsumableArray(_this3.state.dataSource);\n\n      var index = newData.findIndex(function (item) {\n        return row.key === item.key;\n      });\n      var item = newData[index];\n      newData.splice(index, 1, _objectSpread({}, item, row));\n\n      _this3.setState({\n        dataSource: newData\n      });\n    });\n\n    _this3.columns = [{\n      title: 'name',\n      dataIndex: 'name',\n      width: '30%',\n      editable: true\n    }, {\n      title: 'age',\n      dataIndex: 'age'\n    }, {\n      title: 'address',\n      dataIndex: 'address'\n    }, {\n      title: 'operation',\n      dataIndex: 'operation',\n      render: function render(text, record) {\n        return _this3.state.dataSource.length >= 1 ? React.createElement(Popconfirm, {\n          title: \"Sure to delete?\",\n          onConfirm: function onConfirm() {\n            return _this3.handleDelete(record.key);\n          }\n        }, React.createElement(\"a\", {\n          href: \"javascript:;\"\n        }, \"Delete\")) : null;\n      }\n    }];\n    _this3.state = {\n      dataSource: [{\n        key: '0',\n        name: 'Edward King 0',\n        age: '32',\n        address: 'London, Park Lane no. 0'\n      }, {\n        key: '1',\n        name: 'Edward King 1',\n        age: '32',\n        address: 'London, Park Lane no. 1'\n      }],\n      count: 2\n    };\n    return _this3;\n  }\n\n  _createClass(EditableTable, [{\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var dataSource = this.state.dataSource;\n      var components = {\n        body: {\n          row: EditableFormRow,\n          cell: EditableCell\n        }\n      };\n      var columns = this.columns.map(function (col) {\n        if (!col.editable) {\n          return col;\n        }\n\n        return _objectSpread({}, col, {\n          onCell: function onCell(record) {\n            return {\n              record: record,\n              editable: col.editable,\n              dataIndex: col.dataIndex,\n              title: col.title,\n              handleSave: _this4.handleSave\n            };\n          }\n        });\n      });\n      return React.createElement(\"div\", null, React.createElement(Button, {\n        onClick: this.handleAdd,\n        type: \"primary\",\n        style: {\n          marginBottom: 16\n        }\n      }, \"Add a row\"), React.createElement(Table, {\n        components: components,\n        rowClassName: function rowClassName() {\n          return 'editable-row';\n        },\n        bordered: true,\n        dataSource: dataSource,\n        columns: columns\n      }));\n    }\n  }]);\n\n  return EditableTable;\n}(React.Component);\n\nexport default EditableTable;","map":null,"metadata":{},"sourceType":"module"}