{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nimport Hint from 'react-vis/dist/plot/hint';\nimport Sankey from 'react-vis/dist/sankey';\nvar BLURRED_LINK_OPACITY = 0.3;\nvar FOCUSED_LINK_OPACITY = 0.6;\nvar nodes = [{\n  name: 'a'\n}, {\n  name: 'b'\n}, {\n  name: 'c'\n}];\nvar links = [{\n  source: 0,\n  target: 1,\n  value: 10\n}, {\n  source: 0,\n  target: 2,\n  value: 20\n}, {\n  source: 1,\n  target: 2,\n  value: 20\n}];\n\nvar LinkHintSankeyExample =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(LinkHintSankeyExample, _React$Component);\n\n  function LinkHintSankeyExample() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, LinkHintSankeyExample);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LinkHintSankeyExample)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      activeLink: null\n    });\n\n    return _this;\n  }\n\n  _createClass(LinkHintSankeyExample, [{\n    key: \"_renderHint\",\n    value: function _renderHint() {\n      var activeLink = this.state.activeLink; // calculate center x,y position of link for positioning of hint\n\n      var x = activeLink.source.x1 + (activeLink.target.x0 - activeLink.source.x1) / 2;\n      var y = activeLink.y0 - (activeLink.y0 - activeLink.y1) / 2;\n\n      var hintValue = _defineProperty({}, \"\".concat(activeLink.source.name, \" \\u279E \").concat(activeLink.target.name), activeLink.value);\n\n      return React.createElement(Hint, {\n        x: x,\n        y: y,\n        value: hintValue\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var activeLink = this.state.activeLink; // Note: d3.sankey currently mutates the `nodes` and `links` arrays, which doesn't play nice\n      // with React's single-direction data flow. We create a copy of each before we pass to the sankey\n      // component, just to be sure.\n\n      return React.createElement(\"div\", null, React.createElement(Sankey, {\n        className: \"m-auto\",\n        nodes: nodes.map(function (d) {\n          return _objectSpread({}, d);\n        }),\n        links: links.map(function (d, i) {\n          return _objectSpread({}, d, {\n            opacity: activeLink && i === activeLink.index ? FOCUSED_LINK_OPACITY : BLURRED_LINK_OPACITY\n          });\n        }),\n        width: 200,\n        height: 221 // do not use voronoi in combination with link mouse over\n        ,\n        hasVoronoi: false,\n        onLinkMouseOver: function onLinkMouseOver(node) {\n          return _this2.setState({\n            activeLink: node\n          });\n        },\n        onLinkMouseOut: function onLinkMouseOut() {\n          return _this2.setState({\n            activeLink: null\n          });\n        }\n      }, activeLink && this._renderHint()));\n    }\n  }]);\n\n  return LinkHintSankeyExample;\n}(React.Component);\n\nexport { LinkHintSankeyExample as default };","map":null,"metadata":{},"sourceType":"module"}