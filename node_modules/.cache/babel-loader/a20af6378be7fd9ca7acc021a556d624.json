{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nimport { Upload, Button, Icon } from 'antd';\n\nvar MyUpload =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MyUpload, _React$Component);\n\n  function MyUpload() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MyUpload);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MyUpload)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      fileList: [{\n        uid: '-1',\n        name: 'xxx.png',\n        status: 'done',\n        url: 'http://www.baidu.com/xxx.png'\n      }]\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (info) {\n      var fileList = info.fileList; // 1. Limit the number of uploaded files\n      // Only to show two recent uploaded files, and old ones will be replaced by the new\n\n      fileList = fileList.slice(-2); // 2. Read from response and show file link\n\n      fileList = fileList.map(function (file) {\n        if (file.response) {\n          // Component will show file.url as link\n          file.url = file.response.url;\n        }\n\n        return file;\n      }); // 3. Filter successfully uploaded files according to response from server\n\n      fileList = fileList.filter(function (file) {\n        if (file.response) {\n          return file.response.status === 'success';\n        }\n\n        return true;\n      });\n\n      _this.setState({\n        fileList: fileList\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(MyUpload, [{\n    key: \"render\",\n    value: function render() {\n      var props = {\n        action: '//jsonplaceholder.typicode.com/posts/',\n        onChange: this.handleChange,\n        multiple: true\n      };\n      return React.createElement(Upload, _extends({}, props, {\n        fileList: this.state.fileList\n      }), React.createElement(Button, null, React.createElement(Icon, {\n        type: \"upload\"\n      }), \" Upload\"));\n    }\n  }]);\n\n  return MyUpload;\n}(React.Component);\n\nexport default MyUpload;","map":null,"metadata":{},"sourceType":"module"}