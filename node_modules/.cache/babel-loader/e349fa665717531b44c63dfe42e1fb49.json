{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\n// Copyright (c) 2016 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { FlexibleWidthXYPlot, HexbinSeries, XAxis, YAxis } from 'react-vis';\nimport { Button } from 'antd';\nimport { Component } from 'react';\nimport DATA from '../datasets/car-data.json';\nimport ShowcaseButton from '../showcase-components/showcase-button';\nvar ButtonGroup = Button.Group;\nvar DIMENSIONS = ['economy (mpg)', 'cylinders', 'displacement (cc)', 'power (hp)', 'weight (lb)', '0-60 mph (s)', 'year'];\n\nvar HexbinSizeExample =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(HexbinSizeExample, _Component);\n\n  function HexbinSizeExample() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, HexbinSizeExample);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(HexbinSizeExample)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      xAxis: 0,\n      yAxis: 3\n    });\n\n    return _this;\n  }\n\n  _createClass(HexbinSizeExample, [{\n    key: \"updateX\",\n    value: function updateX(increment) {\n      this.setState({\n        xAxis: (this.state.xAxis + (increment ? 1 : -1)) % DIMENSIONS.length\n      });\n    }\n  }, {\n    key: \"updateY\",\n    value: function updateY(increment) {\n      this.setState({\n        yAxis: (this.state.yAxis + (increment ? 1 : -1)) % DIMENSIONS.length\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          xAxis = _this$state.xAxis,\n          yAxis = _this$state.yAxis;\n      var data = DATA.map(function (d) {\n        return {\n          x: Number(d[DIMENSIONS[xAxis]]),\n          y: Number(d[DIMENSIONS[yAxis]])\n        };\n      });\n      return React.createElement(\"div\", {\n        className: \"centered-and-flexed\"\n      }, React.createElement(\"div\", {\n        className: \"centered-and-flexed-controls d-flex\"\n      }, React.createElement(ButtonGroup, {\n        size: \"sm\"\n      }, React.createElement(ShowcaseButton, {\n        onClick: function onClick() {\n          return _this2.updateX(false);\n        },\n        buttonContent: 'Prev X'\n      }), React.createElement(ShowcaseButton, {\n        buttonContent: \"X AXIS \".concat(DIMENSIONS[xAxis])\n      }), React.createElement(ShowcaseButton, {\n        onClick: function onClick() {\n          return _this2.updateX(true);\n        },\n        buttonContent: 'Next X'\n      })), React.createElement(\"span\", {\n        className: \"mr-auto\"\n      }), React.createElement(ButtonGroup, {\n        size: \"sm\"\n      }, React.createElement(ShowcaseButton, {\n        onClick: function onClick() {\n          return _this2.updateY(false);\n        },\n        buttonContent: 'Prev Y'\n      }), React.createElement(ShowcaseButton, {\n        buttonContent: \"Y AXIS \".concat(DIMENSIONS[yAxis])\n      }), React.createElement(ShowcaseButton, {\n        onClick: function onClick() {\n          return _this2.updateY(true);\n        },\n        buttonContent: 'Next Y'\n      }))), React.createElement(FlexibleWidthXYPlot, {\n        onMouseLeave: function onMouseLeave() {\n          return _this2.setState({\n            hoveredNode: null\n          });\n        },\n        height: 331\n      }, React.createElement(HexbinSeries, {\n        animation: true,\n        sizeHexagonsWithCount: true,\n        className: \"hexbin-size-example\",\n        colorRange: ['#f5222d', '#faad14'],\n        radius: 15,\n        data: data\n      }), React.createElement(XAxis, {\n        title: DIMENSIONS[xAxis],\n        style: {\n          strokeWidth: 0.5\n        }\n      }), React.createElement(YAxis, {\n        title: DIMENSIONS[yAxis],\n        style: {\n          strokeWidth: 0.5\n        }\n      })));\n    }\n  }]);\n\n  return HexbinSizeExample;\n}(Component);\n\nexport { HexbinSizeExample as default };","map":null,"metadata":{},"sourceType":"module"}