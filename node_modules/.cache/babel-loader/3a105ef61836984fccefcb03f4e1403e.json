{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport React from \"react\";\nimport { createContext, useContext, useEffect, useReducer } from 'react';\nimport Router from 'next/router';\nvar Context = createContext();\nvar Provider = Context.Provider;\nvar mql;\nRouter.events.on('routeChangeComplete', function () {\n  return document.querySelector('.workspace > .ant-layout').scrollTop = 0;\n});\n\nvar saveToLocal = function saveToLocal(state) {\n  delete state.mobile;\n  delete state.optionDrawer;\n  delete state.mobileDrawer;\n  localStorage.setItem('settings', _JSON$stringify(state));\n};\n\nvar reducer = function reducer(state, action) {\n  switch (action.type) {\n    case 'fullscreen':\n      {\n        var element = document.querySelector('#__next');\n        var isFullscreen = document.webkitIsFullScreen || document.mozFullScreen || false;\n\n        element.requestFullScreen = element.requestFullScreen || element.webkitRequestFullScreen || element.mozRequestFullScreen || function () {\n          return false;\n        };\n\n        document.cancelFullScreen = document.cancelFullScreen || document.webkitCancelFullScreen || document.mozCancelFullScreen || function () {\n          return false;\n        };\n\n        isFullscreen ? document.cancelFullScreen() : element.requestFullScreen();\n        return _objectSpread({}, state, {\n          fullscreen: !isFullscreen\n        });\n      }\n\n    case 'boxed':\n      {\n        var newState = _objectSpread({}, state, {\n          boxed: !state.boxed\n        });\n\n        saveToLocal(newState);\n        return newState;\n      }\n\n    case 'sidebarTheme':\n      {\n        var _newState = _objectSpread({}, state, {\n          darkSidebar: !state.darkSidebar\n        });\n\n        saveToLocal(_newState);\n        return _newState;\n      }\n\n    case 'sidebarPopup':\n      {\n        var _newState2 = _objectSpread({}, state, {\n          sidebarPopup: !state.sidebarPopup\n        });\n\n        saveToLocal(_newState2);\n        return _newState2;\n      }\n\n    case 'sidebarIcons':\n      {\n        if (state.collapsed) return _objectSpread({}, state);\n\n        var _newState3 = _objectSpread({}, state, {\n          sidebarIcons: !state.sidebarIcons\n        });\n\n        saveToLocal(_newState3);\n        return _newState3;\n      }\n\n    case 'collapse':\n      {\n        var collapse = state.collapsed;\n        var sidebarIcons = state.sidebarIcons;\n        if (!collapse) sidebarIcons = true;\n\n        var _newState4 = _objectSpread({}, state, {\n          collapsed: !state.collapsed,\n          sidebarIcons: sidebarIcons\n        });\n\n        saveToLocal(_newState4);\n        return _newState4;\n      }\n\n    case 'weak':\n      {\n        var weak = state.weakColor;\n        var darkSidebar = state.darkSidebar;\n        if (!weak && darkSidebar) darkSidebar = false;\n\n        var _newState5 = _objectSpread({}, state, {\n          weakColor: !state.weakColor,\n          darkSidebar: darkSidebar\n        });\n\n        saveToLocal(_newState5);\n        return _newState5;\n      }\n\n    case 'mobile':\n      return _objectSpread({}, state, {\n        mobile: !mql.matches\n      });\n\n    case 'options':\n      return _objectSpread({}, state, {\n        optionDrawer: !state.optionDrawer\n      });\n\n    case 'mobileDrawer':\n      return _objectSpread({}, state, {\n        mobileDrawer: !state.mobileDrawer\n      });\n\n    case 'setup':\n      {\n        var settings = JSON.parse(localStorage.getItem('settings'));\n        return _objectSpread({}, state, {\n          mobile: !mql.matches\n        }, settings);\n      }\n\n    default:\n      return state;\n  }\n};\n\nvar AppProvider = function AppProvider(props) {\n  var _useReducer = useReducer(reducer, {\n    name: 'One',\n    mobile: false,\n    boxed: false,\n    darkSidebar: false,\n    sidebarPopup: false,\n    sidebarIcons: false,\n    collapsed: false,\n    weakColor: false,\n    optionDrawer: false,\n    mobileDrawer: false,\n    fullscreen: false\n  }),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  useEffect(function () {\n    mql = window.matchMedia(\"(min-width: 992px)\");\n    mql.addListener(mediaQueryChanged);\n    dispatch({\n      type: 'setup'\n    });\n    return function () {\n      return mql.removeListener(mediaQueryChanged);\n    };\n  }, []);\n\n  var mediaQueryChanged = function mediaQueryChanged() {\n    dispatch({\n      type: 'mobile'\n    });\n  };\n\n  return React.createElement(Provider, {\n    value: [state, dispatch]\n  }, props.children);\n};\n\nexport default AppProvider;\nexport var useAppState = function useAppState() {\n  return useContext(Context);\n};","map":null,"metadata":{},"sourceType":"module"}