{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\n// Copyright (c) 2016 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { CONTINUOUS_COLOR_RANGE, DISCRETE_COLOR_RANGE, EXTENDED_DISCRETE_COLOR_RANGE } from 'react-vis/dist/theme';\nimport { GradientDefs, LineSeries, MarkSeries, VerticalBarSeries, XYPlot } from 'react-vis';\nimport React from 'react';\nvar colors = ['#cd3b54', '#59b953', '#ba4fb9', '#99b53e', '#7f61d3', '#c9a83a', '#626dbc', '#e08b39', '#5ea0d8', '#cf4d2a', '#4fb79b', '#d24691', '#528240', '#c388d2', '#80742b', '#9c4a6d', '#caaa70', '#e0829f', '#9d5d30', '#dc7666'];\nvar data = {\n  noColor: [],\n  categoryColorAtSeriesLevel: [],\n  literalColorAtSeriesLevel: [],\n  linearColorAtSeriesLevel: [],\n  literalColorAtMarkLevel: [],\n  linearColorAtMarkLevel: [],\n  categoryColorAtMarkLevel: []\n};\n\nfor (var i = 0; i < 3; i++) {\n  var noColorSeries = [];\n  var categoryColorSeries = [];\n  var literalColorSeries = [];\n  var linearColorSeries = [];\n\n  for (var j = 0; j < 10; j++) {\n    var datapoint = {\n      x: j,\n      y: Math.random() * 10\n    };\n\n    var categoryDatapoint = _objectSpread({}, datapoint, {\n      color: Math.floor(Math.random() * 20)\n    });\n\n    var linearDatapoint = _objectSpread({}, datapoint, {\n      color: Math.random() * 10\n    });\n\n    var literalDatapoint = _objectSpread({}, datapoint, {\n      color: colors[Math.floor(Math.random() * 20)]\n    });\n\n    noColorSeries.push(datapoint);\n    categoryColorSeries.push(categoryDatapoint);\n    literalColorSeries.push(literalDatapoint);\n    linearColorSeries.push(linearDatapoint);\n  }\n\n  data.noColor.push({\n    key: i,\n    data: noColorSeries\n  });\n  data.categoryColorAtSeriesLevel.push({\n    key: i,\n    data: noColorSeries,\n    color: i\n  });\n  data.literalColorAtSeriesLevel.push({\n    key: i,\n    data: noColorSeries,\n    color: colors[i]\n  });\n  data.linearColorAtSeriesLevel.push({\n    key: i,\n    data: noColorSeries,\n    color: Math.floor(Math.random() * 20)\n  });\n  data.literalColorAtMarkLevel.push({\n    key: i,\n    data: literalColorSeries\n  });\n  data.linearColorAtMarkLevel.push({\n    key: i,\n    data: linearColorSeries\n  });\n  data.categoryColorAtMarkLevel.push({\n    key: i,\n    data: categoryColorSeries\n  });\n}\n\nvar defaultXYPlotProps = {\n  width: 200,\n  height: 200,\n  xDomain: [-0.5, 9.5],\n  yDomain: [-0.5, 10.5],\n  margin: {\n    top: 5,\n    bottom: 5,\n    left: 5,\n    right: 5\n  }\n};\nexport function SensibleDefaults() {\n  return generateCharts(data.noColor);\n}\nexport function ColorInXYPlot() {\n  return generateCharts(data.noColor, {\n    color: 'red',\n    stroke: 'red'\n  });\n}\nexport function LiteralColorAtSeriesLevel() {\n  return generateCharts(data.literalColorAtSeriesLevel);\n}\nexport function LinearColorAtSeriesLevel() {\n  return generateCharts(data.linearColorAtSeriesLevel, {\n    colorType: 'linear',\n    colorDomain: [0, 9],\n    colorRange: CONTINUOUS_COLOR_RANGE\n  });\n}\nexport function CategoryColorAtSeriesLevel() {\n  return generateCharts(data.categoryColorAtSeriesLevel, {\n    colorType: 'category',\n    colorDomain: [0, 1, 2],\n    colorRange: EXTENDED_DISCRETE_COLOR_RANGE\n  });\n}\nexport function LiteralColorAtMarkLevel() {\n  return generateCharts(data.literalColorAtMarkLevel, {\n    colorType: 'literal'\n  });\n}\nexport function CategoryColorAtMarkLevel() {\n  return generateCharts(data.categoryColorAtMarkLevel, {\n    colorType: 'category'\n  });\n}\nexport function CategoryColorAtMarkLevelCustomPalette() {\n  return generateCharts(data.categoryColorAtMarkLevel, {\n    colorType: 'category',\n    colorRange: colors\n  });\n}\nexport function CategoryColorAtMarkLevelFixedStroke() {\n  return generateCharts(data.categoryColorAtMarkLevel, {\n    colorType: 'category',\n    stroke: '#f70'\n  });\n}\nexport function LinearColorAtMarkLevelNoPalette() {\n  return generateCharts(data.linearColorAtMarkLevel);\n}\nexport function LinearColorAtMarkLevel() {\n  return generateCharts(data.linearColorAtMarkLevel, {\n    colorRange: ['#c7e9c0', '#00441b']\n  });\n}\nexport function LineSeriesMarkSeries() {\n  return React.createElement(XYPlot, _extends({}, defaultXYPlotProps, {\n    width: 600\n  }), data.noColor.map(function (d, i) {\n    return React.createElement(LineSeries, _extends({}, d, {\n      key: i,\n      color: DISCRETE_COLOR_RANGE[i]\n    }));\n  }), data.noColor.map(function (d, i) {\n    return React.createElement(MarkSeries, _extends({}, d, {\n      key: i,\n      color: DISCRETE_COLOR_RANGE[i],\n      stroke: \"white\"\n    }));\n  }));\n}\nexport function GradientCharts() {\n  var gradient = React.createElement(GradientDefs, null, React.createElement(\"linearGradient\", {\n    id: \"myGradient\",\n    gradientUnits: \"userSpaceOnUse\",\n    x1: \"0\",\n    y1: \"0\",\n    x2: \"200\",\n    y2: \"200\"\n  }, React.createElement(\"stop\", {\n    offset: \"10%\",\n    stopColor: \"#c6e48b\"\n  }), React.createElement(\"stop\", {\n    offset: \"33%\",\n    stopColor: \"#7bc96f\"\n  }), React.createElement(\"stop\", {\n    offset: \"66%\",\n    stopColor: \"#239a3b\"\n  }), React.createElement(\"stop\", {\n    offset: \"90%\",\n    stopColor: \"#196127\"\n  })));\n  return React.createElement(\"div\", {\n    style: {\n      display: 'flex'\n    }\n  }, React.createElement(XYPlot, defaultXYPlotProps, gradient, React.createElement(VerticalBarSeries, _extends({}, data.noColor[0], {\n    color: 'url(#myGradient)'\n  }))), React.createElement(XYPlot, defaultXYPlotProps, gradient, React.createElement(LineSeries, _extends({}, data.noColor[0], {\n    color: 'url(#myGradient)'\n  }))), React.createElement(XYPlot, defaultXYPlotProps, gradient, React.createElement(MarkSeries, _extends({}, data.noColor[0], {\n    color: 'url(#myGradient)'\n  }))));\n}\nexport function ColorSpecificity() {\n  var accentColor = '#FF9833';\n\n  var seventhElementColored = _toConsumableArray(data.noColor[2].data);\n\n  seventhElementColored[6].color = accentColor;\n  return React.createElement(\"div\", {\n    style: {\n      display: 'flex'\n    }\n  }, React.createElement(XYPlot, _extends({}, defaultXYPlotProps, {\n    color: \"#12939A\",\n    colorType: \"literal\"\n  }), React.createElement(VerticalBarSeries, {\n    data: seventhElementColored\n  })), React.createElement(XYPlot, _extends({}, defaultXYPlotProps, {\n    stroke: \"#e5e5e5\",\n    strokeType: \"literal\"\n  }), React.createElement(LineSeries, data.noColor[0]), React.createElement(LineSeries, data.noColor[1]), React.createElement(LineSeries, _extends({}, data.noColor[2], {\n    stroke: accentColor\n  }))), React.createElement(XYPlot, _extends({}, defaultXYPlotProps, {\n    color: \"#12939A\",\n    colorType: \"literal\",\n    stroke: \"white\"\n  }), React.createElement(MarkSeries, data.noColor[0]), React.createElement(MarkSeries, data.noColor[1]), React.createElement(MarkSeries, {\n    data: seventhElementColored,\n    color: \"#4fb79b\"\n  })));\n}\nexport function ReactVis5() {\n  return generatePalette(DISCRETE_COLOR_RANGE);\n}\nexport function ReactVis20() {\n  return generatePalette(EXTENDED_DISCRETE_COLOR_RANGE);\n}\nexport function Continuous() {\n  return generatePalette(CONTINUOUS_COLOR_RANGE);\n}\nexport function CustomPalette() {\n  return generatePalette(colors);\n}\n\nfunction generatePalette(range) {\n  return React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      maxWidth: 700,\n      flexWrap: 'wrap'\n    }\n  }, range.map(function (d, i) {\n    return React.createElement(\"div\", {\n      key: i,\n      style: {\n        background: d,\n        width: 80,\n        height: 80,\n        borderRadius: 5,\n        margin: 10,\n        position: 'relative'\n      }\n    }, React.createElement(\"div\", {\n      className: \"color-box\",\n      style: {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        textShadow: 'white 1px 1px',\n        transform: 'translate(-50%, -50%)'\n      }\n    }, d));\n  }));\n}\n\nfunction generateCharts(seriesData, props) {\n  return React.createElement(\"div\", {\n    style: {\n      display: 'flex'\n    }\n  }, [VerticalBarSeries, LineSeries, MarkSeries].map(function (Type, key) {\n    return React.createElement(XYPlot, _extends({\n      key: key\n    }, defaultXYPlotProps, props), seriesData.map(function (d, i) {\n      return React.createElement(Type, d);\n    }));\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}