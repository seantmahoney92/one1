{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\n// Copyright (c) 2016 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { Crosshair, DiscreteColorLegend, FlexibleWidthXYPlot, HorizontalGridLines, LineSeries, VerticalRectSeries, XAxis, YAxis } from 'react-vis';\nimport NoSSR from 'react-no-ssr';\nimport { RefreshCcw } from 'react-feather';\nimport ShowcaseButton from '../showcase-components/showcase-button';\n/**\n * Get the array of x and y pairs.\n * The function tries to avoid too large changes of the chart.\n * @param {number} total Total number of values.\n * @returns {Array} Array of data.\n * @private\n */\n\nfunction getRandomSeriesData(total) {\n  var result = [];\n  var lastY = Math.random() * 40 - 20;\n  var y;\n  var firstY = lastY;\n\n  for (var i = 0; i < Math.max(total, 3); i++) {\n    y = Math.random() * firstY - firstY / 2 + lastY;\n    result.push({\n      left: i,\n      top: y\n    });\n    lastY = y;\n  }\n\n  return result;\n}\n\nvar Example =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Example, _React$Component);\n\n  function Example(props) {\n    var _this;\n\n    _classCallCheck(this, Example);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Example).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"_formatCrosshairItems\", function (values) {\n      var series = _this.state.series;\n      return values.map(function (v, i) {\n        return {\n          title: series[i].title,\n          value: v.top\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_formatCrosshairTitle\", function (values) {\n      return {\n        title: 'X',\n        value: values[0].left\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_legendClickHandler\", function (item, i) {\n      var series = _this.state.series;\n      series[i].disabled = !series[i].disabled;\n\n      _this.setState({\n        series: series\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_mouseLeaveHandler\", function () {\n      _this.setState({\n        crosshairValues: []\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_nearestXHandler\", function (value, _ref) {\n      var index = _ref.index;\n      var series = _this.state.series;\n\n      _this.setState({\n        crosshairValues: series.map(function (s) {\n          return s.data[index];\n        })\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_updateButtonClicked\", function () {\n      var series = _this.state.series;\n      var totalValues = Math.random() * 50;\n      series.forEach(function (s) {\n        s.data = getRandomSeriesData(totalValues);\n      });\n\n      _this.setState({\n        series: series\n      });\n    });\n\n    var _totalValues = Math.random() * 50;\n\n    _this.state = {\n      crosshairValues: [],\n      series: [{\n        title: 'Apples',\n        disabled: false,\n        data: getRandomSeriesData(_totalValues)\n      }, {\n        title: 'Bananas',\n        disabled: false,\n        data: getRandomSeriesData(_totalValues)\n      }]\n    };\n    return _this;\n  }\n  /**\n   * A callback to format the crosshair items.\n   * @param {Object} values Array of values.\n   * @returns {Array<Object>} Array of objects with titles and values.\n   * @private\n   */\n\n\n  _createClass(Example, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          series = _this$state.series,\n          crosshairValues = _this$state.crosshairValues;\n      return React.createElement(NoSSR, null, React.createElement(\"div\", {\n        className: \"example-with-click-me\"\n      }, React.createElement(\"div\", {\n        className: \"legend text-center\"\n      }, React.createElement(DiscreteColorLegend, {\n        onItemClick: this._legendClickHandler,\n        width: 180,\n        items: series\n      }), React.createElement(ShowcaseButton, {\n        buttonContent: React.createElement(RefreshCcw, {\n          size: 14,\n          strokeWidth: 1\n        }),\n        onClick: this._updateButtonClicked\n      })), React.createElement(\"div\", {\n        className: \"chart\"\n      }, React.createElement(FlexibleWidthXYPlot, {\n        animation: true,\n        getX: function getX(d) {\n          return d.left;\n        },\n        getY: function getY(d) {\n          return d.top;\n        },\n        onMouseLeave: this._mouseLeaveHandler,\n        xDomain: [-0.5, series[0].data.length - 1],\n        height: 300\n      }, React.createElement(HorizontalGridLines, null), React.createElement(YAxis, {\n        className: \"cool-custom-name\",\n        tickSizeInner: 0,\n        tickSizeOuter: 8,\n        style: {\n          strokeWidth: 0.5\n        }\n      }), React.createElement(XAxis, {\n        className: \"even-cooler-custom-name\",\n        tickSizeInner: 0,\n        tickSizeOuter: 8,\n        style: {\n          strokeWidth: 0.5\n        }\n      }), React.createElement(VerticalRectSeries, _extends({\n        data: series[0].data.map(function (_ref2) {\n          var left = _ref2.left,\n              top = _ref2.top;\n          return {\n            x0: left - 0.5,\n            left: left + 0.5,\n            top: top\n          };\n        }),\n        stroke: \"white\",\n        color: \"#007bff\",\n        onNearestX: this._nearestXHandler\n      }, series[0].disabled ? {\n        opacity: 0.2\n      } : null)), React.createElement(LineSeries, _extends({\n        data: series[1].data,\n        curve: \"curveMonotoneX\",\n        color: \"#f5222d\"\n      }, series[1].disabled ? {\n        opacity: 0.2\n      } : null)), React.createElement(Crosshair, {\n        itemsFormat: this._formatCrosshairItems,\n        titleFormat: this._formatCrosshairTitle,\n        values: crosshairValues\n      })))));\n    }\n  }]);\n\n  return Example;\n}(React.Component);\n\nexport { Example as default };","map":null,"metadata":{},"sourceType":"module"}