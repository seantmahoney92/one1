{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\n// Copyright (c) 2016 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { Borders, FlexibleWidthXYPlot, HexbinSeries, Hint, XAxis, YAxis } from 'react-vis';\nimport { Button } from 'antd';\nimport { Component } from 'react';\nimport DATA from '../datasets/old-faithful.json';\nimport ShowcaseButton from '../showcase-components/showcase-button';\nvar ButtonGroup = Button.Group;\n\nfunction updateData() {\n  return DATA.map(function (row) {\n    return {\n      waiting: row.waiting + (Math.random() - 0.5) * 10,\n      eruptions: row.eruptions + (Math.random() - 0.5) * 2\n    };\n  });\n}\n\nvar HexHeatmap =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(HexHeatmap, _Component);\n\n  function HexHeatmap() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, HexHeatmap);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(HexHeatmap)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      data: DATA,\n      hoveredNode: null,\n      radius: 10,\n      offset: 0\n    });\n\n    return _this;\n  }\n\n  _createClass(HexHeatmap, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          data = _this$state.data,\n          radius = _this$state.radius,\n          hoveredNode = _this$state.hoveredNode,\n          offset = _this$state.offset;\n      return React.createElement(\"div\", null, React.createElement(ButtonGroup, {\n        size: \"sm\"\n      }, React.createElement(ShowcaseButton, {\n        onClick: function onClick() {\n          return _this2.setState({\n            data: updateData()\n          });\n        },\n        buttonContent: 'Update data'\n      }), React.createElement(ShowcaseButton, {\n        onClick: function onClick() {\n          return _this2.setState({\n            radius: (Math.random() - 0.5) * 10 + 10\n          });\n        },\n        buttonContent: 'Update radius'\n      }), React.createElement(ShowcaseButton, {\n        onClick: function onClick() {\n          return _this2.setState({\n            offset: (Math.random() - 0.5) * 10 + 10\n          });\n        },\n        buttonContent: 'Update offset'\n      })), React.createElement(FlexibleWidthXYPlot, {\n        xDomain: [40, 100],\n        yDomain: [1.5, 8],\n        getX: function getX(d) {\n          return d.waiting;\n        },\n        getY: function getY(d) {\n          return d.eruptions;\n        },\n        onMouseLeave: function onMouseLeave() {\n          return _this2.setState({\n            hoveredNode: null\n          });\n        },\n        height: 276\n      }, React.createElement(HexbinSeries, {\n        animation: true,\n        className: \"hexbin-example\",\n        style: {\n          stroke: '#125C77',\n          strokeLinejoin: 'round'\n        },\n        onValueMouseOver: function onValueMouseOver(d) {\n          return _this2.setState({\n            hoveredNode: d\n          });\n        },\n        xOffset: offset,\n        yOffset: offset,\n        colorRange: ['#f5222d', '#faad14'],\n        radius: radius,\n        data: data\n      }), React.createElement(Borders, {\n        style: {\n          all: {\n            fill: '#fff'\n          }\n        }\n      }), React.createElement(XAxis, {\n        style: {\n          strokeWidth: 0.5\n        }\n      }), React.createElement(YAxis, {\n        style: {\n          strokeWidth: 0.5\n        }\n      }), hoveredNode && React.createElement(Hint, {\n        xType: \"literal\",\n        yType: \"literal\",\n        getX: function getX(d) {\n          return d.x;\n        },\n        getY: function getY(d) {\n          return d.y;\n        },\n        value: {\n          x: hoveredNode.x,\n          y: hoveredNode.y,\n          value: hoveredNode.length\n        }\n      })));\n    }\n  }]);\n\n  return HexHeatmap;\n}(Component);\n\nexport { HexHeatmap as default };","map":null,"metadata":{},"sourceType":"module"}