{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\n// Copyright (c) 2016 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { Row } from 'antd';\nimport ShowcaseButton from '../showcase-components/showcase-button';\nimport Treemap from 'react-vis/dist/treemap';\n\nfunction _getRandomData(total) {\n  var totalLeaves = total || Math.random() * 20;\n  var leaves = [];\n\n  for (var i = 0; i < totalLeaves; i++) {\n    leaves.push({\n      name: total ? total : String(Math.random()).slice(0, 3),\n      size: Math.random() * 1000,\n      color: Math.random(),\n      style: {\n        border: 'thin solid red'\n      }\n    });\n  }\n\n  return {\n    title: '',\n    color: 1,\n    children: leaves\n  };\n}\n\nvar DynamicTreemapExample =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DynamicTreemapExample, _React$Component);\n\n  function DynamicTreemapExample() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DynamicTreemapExample);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DynamicTreemapExample)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      hoveredNode: false,\n      treemapData: _getRandomData(20),\n      useCirclePacking: false\n    });\n\n    return _this;\n  }\n\n  _createClass(DynamicTreemapExample, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          hoveredNode = _this$state.hoveredNode,\n          useCirclePacking = _this$state.useCirclePacking;\n      var treeProps = {\n        animation: {\n          damping: 9,\n          stiffness: 300\n        },\n        data: this.state.treemapData,\n        onLeafMouseOver: function onLeafMouseOver(x) {\n          return _this2.setState({\n            hoveredNode: x\n          });\n        },\n        onLeafMouseOut: function onLeafMouseOut() {\n          return _this2.setState({\n            hoveredNode: false\n          });\n        },\n        onLeafClick: function onLeafClick() {\n          return _this2.setState({\n            treemapData: _getRandomData()\n          });\n        },\n        height: 300,\n        mode: this.state.useCirclePacking ? 'circlePack' : 'squarify',\n        getLabel: function getLabel(x) {\n          return x.name;\n        },\n        width: 350\n      };\n      return React.createElement(\"div\", {\n        className: \"dynamic-treemap-example\"\n      }, React.createElement(ShowcaseButton, {\n        onClick: function onClick() {\n          return _this2.setState({\n            useCirclePacking: !useCirclePacking\n          });\n        },\n        buttonContent: 'Toggle circle pack'\n      }), React.createElement(\"span\", {\n        className: \" mb-3 d-block\"\n      }), React.createElement(Row, {\n        type: \"flex\",\n        align: \"middle\",\n        justify: \"center\"\n      }, React.createElement(\"div\", null, React.createElement(Treemap, _extends({\n        className: \"m-auto\"\n      }, treeProps)), \"click above to the update data\", hoveredNode && hoveredNode.value)));\n    }\n  }]);\n\n  return DynamicTreemapExample;\n}(React.Component);\n\nexport { DynamicTreemapExample as default };","map":null,"metadata":{},"sourceType":"module"}