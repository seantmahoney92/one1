{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nimport { Input, Tree } from 'antd';\nvar TreeNode = Tree.TreeNode;\nvar Search = Input.Search;\nvar x = 3;\nvar y = 2;\nvar z = 1;\nvar gData = [];\n\nvar generateData = function generateData(_level, _preKey, _tns) {\n  var preKey = _preKey || '0';\n  var tns = _tns || gData;\n  var children = [];\n\n  for (var i = 0; i < x; i++) {\n    var key = \"\".concat(preKey, \"-\").concat(i);\n    tns.push({\n      title: key,\n      key: key\n    });\n\n    if (i < y) {\n      children.push(key);\n    }\n  }\n\n  if (_level < 0) {\n    return tns;\n  }\n\n  var level = _level - 1;\n  children.forEach(function (key, index) {\n    tns[index].children = [];\n    return generateData(level, key, tns[index].children);\n  });\n};\n\ngenerateData(z);\nvar dataList = [];\n\nvar generateList = function generateList(data) {\n  for (var i = 0; i < data.length; i++) {\n    var node = data[i];\n    var key = node.key;\n    dataList.push({\n      key: key,\n      title: key\n    });\n\n    if (node.children) {\n      generateList(node.children, node.key);\n    }\n  }\n};\n\ngenerateList(gData);\n\nvar getParentKey = function getParentKey(key, tree) {\n  var parentKey;\n\n  for (var i = 0; i < tree.length; i++) {\n    var node = tree[i];\n\n    if (node.children) {\n      if (node.children.some(function (item) {\n        return item.key === key;\n      })) {\n        parentKey = node.key;\n      } else if (getParentKey(key, node.children)) {\n        parentKey = getParentKey(key, node.children);\n      }\n    }\n  }\n\n  return parentKey;\n};\n\nvar SearchTree =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SearchTree, _React$Component);\n\n  function SearchTree() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SearchTree);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SearchTree)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      expandedKeys: [],\n      searchValue: '',\n      autoExpandParent: true\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onExpand\", function (expandedKeys) {\n      _this.setState({\n        expandedKeys: expandedKeys,\n        autoExpandParent: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (e) {\n      var value = e.target.value;\n      var expandedKeys = dataList.map(function (item) {\n        if (item.title.indexOf(value) > -1) {\n          return getParentKey(item.key, gData);\n        }\n\n        return null;\n      }).filter(function (item, i, self) {\n        return item && self.indexOf(item) === i;\n      });\n\n      _this.setState({\n        expandedKeys: expandedKeys,\n        searchValue: value,\n        autoExpandParent: true\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(SearchTree, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          searchValue = _this$state.searchValue,\n          expandedKeys = _this$state.expandedKeys,\n          autoExpandParent = _this$state.autoExpandParent;\n\n      var loop = function loop(data) {\n        return data.map(function (item) {\n          var index = item.title.indexOf(searchValue);\n          var beforeStr = item.title.substr(0, index);\n          var afterStr = item.title.substr(index + searchValue.length);\n          var title = index > -1 ? React.createElement(\"span\", null, beforeStr, React.createElement(\"span\", {\n            style: {\n              color: '#f50'\n            }\n          }, searchValue), afterStr) : React.createElement(\"span\", null, item.title);\n\n          if (item.children) {\n            return React.createElement(TreeNode, {\n              key: item.key,\n              title: title\n            }, loop(item.children));\n          }\n\n          return React.createElement(TreeNode, {\n            key: item.key,\n            title: title\n          });\n        });\n      };\n\n      return React.createElement(\"div\", null, React.createElement(Search, {\n        style: {\n          marginBottom: 8\n        },\n        placeholder: \"Search\",\n        onChange: this.onChange\n      }), React.createElement(Tree, {\n        onExpand: this.onExpand,\n        expandedKeys: expandedKeys,\n        autoExpandParent: autoExpandParent\n      }, loop(gData)));\n    }\n  }]);\n\n  return SearchTree;\n}(React.Component);\n\nexport default SearchTree;","map":null,"metadata":{},"sourceType":"module"}